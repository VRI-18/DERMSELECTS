# -*- coding: utf-8 -*-
"""AI ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qTnXwfpl05jYL-z8A0NKND2HGtF2xGyK
"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.metrics import Precision, Recall

from sklearn import metrics
import zipfile
import numpy as np
import matplotlib.pyplot as plt
import os
import requests

from google.colab import drive

drive.mount('/content/drive')

import pandas as pd

data=pd.read_csv("/bin/7z")

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Data

# Commented out IPython magic to ensure Python compatibility.
# %ls

img_size = (450, 450)

def data_preprocessing(path):
    datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1.0/255,
                                                              zoom_range=0.2,
                                                              horizontal_flip=True,
                                                              vertical_flip=True
                                                             )

    generator = datagen.flow_from_directory(
    path,
    batch_size=25,
    class_mode='categorical',
    target_size=img_size,
    color_mode="rgb"
    )

    return generator

train_generator = data_preprocessing("/content/drive/MyDrive/Data/train")
validation_generator = data_preprocessing("/content/drive/MyDrive/Data/val")

sample_image, _ = train_generator.next()
image_shape = sample_image.shape[1:]
num_channels = image_shape[-1]

print("\nDimensione dell'immagine:", image_shape)
print()
plt.imshow(sample_image[0])
plt.title(f"Dimensione: {image_shape}")
plt.axis('off')
plt.show()

act_func = tf.keras.layers.LeakyReLU(alpha=0.1)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(filters=64, kernel_size=3, activation=act_func, padding='same', input_shape=(img_size[0], img_size[1], 3), kernel_initializer='he_normal'),
    tf.keras.layers.BatchNormalization(axis=-1),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.3),

    tf.keras.layers.Conv2D(filters=128, kernel_size=5, activation=act_func, padding='same', kernel_initializer='he_normal'),
    tf.keras.layers.BatchNormalization(axis=-1),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.3),

    tf.keras.layers.Conv2D(filters=128, kernel_size=5, activation=act_func, padding='same', kernel_initializer='he_normal'),
    tf.keras.layers.BatchNormalization(axis=-1),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.3),

    tf.keras.layers.Conv2D(filters=256, kernel_size=3, activation=act_func, padding='same', kernel_initializer='he_normal'),
    tf.keras.layers.BatchNormalization(axis=-1),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.3),
 tf.keras.layers.Conv2D(filters=512, kernel_size=3, activation=act_func, padding='same', kernel_initializer='he_normal'),
    tf.keras.layers.BatchNormalization(axis=-1),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Dropout(0.3),

    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation=act_func),
    tf.keras.layers.BatchNormalization(axis = -1),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(256, activation=act_func),
    tf.keras.layers.BatchNormalization(axis = -1),
    tf.keras.layers.Dropout(0.4),

    tf.keras.layers.Dense(3, activation='softmax')

])

model.summary()

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy', Precision(), Recall()])
history_model = model.fit(train_generator, epochs = 30, validation_data = validation_generator)

class_names = list(train_generator.class_indices.keys())

def predict_disease(model, img_path):
  img = tf.keras.utils.load_img(img_path, target_size=(img_size[0], img_size[1], 3), color_mode = 'rgb')
  array = tf.keras.utils.img_to_array(img)
  array = array / 255.0

  img_array = np.expand_dims(array, axis=0)
  preds = model.predict(img_array)

  #formatted_predictions = []
  for prediction in preds:
      formatted_predictions = [f'{value:.2f}' for value in prediction]

  top_prob_index = np.argmax(formatted_predictions)
  top_prob = round(float(formatted_predictions[top_prob_index].replace(",", "."))*100, 2)

  print("Probability for each class:", sorted(zip(class_names, formatted_predictions), key=lambda x: x[1], reverse=True))

  plt.imshow(tf.keras.utils.load_img(img_path, target_size=(img_size[0], img_size[1],3), color_mode = 'rgb'))
  plt.axis('off')
  plt.title(f"Class: {list(class_names)[top_prob_index]}; Prob: {top_prob}%")
  plt.show()

/content/drive/MyDrive/Data/train/Actinipredict_disease(model, "c keratosis/ISIC_0024763.jpg")

predict_disease(model, "/content/drive/MyDrive/Data/train/Actopic Dermatitis/1_23.jpg")

predict_disease(model, "/content/drive/MyDrive/Data/val/Atopic Dermatitis/1_23.jpg")

predict_disease(model, "/content/drive/MyDrive/Data/train/Actinic keratosis/ISIC_0024913.jpg")

predict_disease(model, "/content/drive/MyDrive/Data/val/Benign keratosis/ISIC_0014619_downsampled.jpg")